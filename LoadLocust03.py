"""
@author:lanmingyong
@time:20200429
"""
import requests
from time import sleep

from locust.clients import HttpSession
from locust import *
from common.DataSource import DataSource
from public.TestCaseAssembly import TestCaseAssembly, BeforeParamCom
from public.AfterParamCom import *
from requests_toolbelt import MultipartEncoder
import queue


class LoadLocust(TaskSequence):
    def on_start(self):
        self.session = HttpSession(base_url='http://bms-3.yzwill.cn')

    @seq_task(1)
    def test_00_login(self):
        t = DataSource().getAllyaml('Logining')
        url = str(t.get('urls'))
        data = dict(t.get('data'))
        try:
            data['mobile'] = self.locust.queueData.get()
            print(data)
        except queue.Empty:
            print('no data exit')
            exit(0)
        headers = {
            "Content-Type": 'application/x-www-form-urlencoded; charset=UTF-8',
            "Host": 'bms-3.yzwill.cn',
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/73.0.3683.86 Safari/537.36"
        }
        response = self.session.post(url=url, data=data, headers=headers, verify=False)
        if response.status_code == 200:
            print("success")
        else:
            print("fails")

    def test_0_getGkOpenEnrollCityInfo(self):
        '''随机获取国开报读城市'''
        intFile = YamlParser('StudentInfo')
        case = TestCaseAssembly().setAipParam('getGkOpenEnrollCityInfo', (intFile.getYamlParms(('GK', 'grade'), ), intFile.getYamlParms(('GK', 'level'))),
                                              (('data', 'ext2'), ('data', 'ext1')))

        headers = {
            "Content-Type": 'application/x-www-form-urlencoded; charset=UTF-8',
            "Host": 'bms-3.yzwill.cn',
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/73.0.3683.86 Safari/537.36"
        }

        response = self.session.post(url=case[2], data=case[3], headers=headers, verify=False)
        if response.status_code == 200:
            print("success")
        else:
            print("fails")
        '''提取参数city'''
        Result = DataExtraction().extRegxParam(response.text, 'getGkOpenEnrollCityInfo')
        city = Result[random.randint(0, len(Result) - 1)]
        return city

    def test_1_sUnvs(self):
        '''随机获取国开院校ID'''
        intFile = YamlParser('StudentInfo')
        case = TestCaseAssembly().setAipParam('sUnvs', (intFile.getYamlParms(('GK', 'recruitType')),), ('data', 'ext1'))
        headers = {
            "Content-Type": 'application/x-www-form-urlencoded; charset=UTF-8',
            "Host": 'bms-3.yzwill.cn',
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/73.0.3683.86 Safari/537.36"
        }
        response = self.session.post(url=case[2], data=case[3], headers=headers, verify=False)
        if response.status_code == 200:
            print("success")
        else:
            print("fails")
        '''提取参数unvsId'''
        Result = DataExtraction().extRegxParam(response.text, 'sUnvs')
        unvsId = Result[random.randint(0, len(Result) - 1)]
        return unvsId

    def test_2_getOpenTestAreaByCity(self, city):
        '''随机获取国开报读考区ID+考区名称'''
        intFile = YamlParser('StudentInfo')
        case = TestCaseAssembly().setAipParam('getOpenTestAreaByCity', (
            intFile.getYamlParms(('GK', 'level')), intFile.getYamlParms(('GK', 'grade')), city), (('data', 'ext2'), ('data', 'ext3'), ('data', 'ext1')))

        headers = {
            "Content-Type": 'application/x-www-form-urlencoded; charset=UTF-8',
            "Host": 'bms-3.yzwill.cn',
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/73.0.3683.86 Safari/537.36"
        }
        response = self.session.post(url=case[2], data=case[3], headers=headers, verify=False)
        if response.status_code == 200:
            print("success")
        else:
            print("fails")
        '''提取参数taId+taName'''
        Result = DataExtraction().extRegxParam(response.text, 'getOpenTestAreaByCity')
        ta = Result[random.randint(0, len(Result) - 1)]
        taId = ta[0]
        taName = ta[1]
        return taId, taName

    def test_3_getOpenPfsnByTaId(self, taId):
        '''随机获取国开报读专业pfsnId+专业名称pfsnName+专业编号pfsnCode'''
        intFile = YamlParser('StudentInfo')
        case = TestCaseAssembly().setAipParam('getOpenPfsnByTaId', (
            intFile.getYamlParms(('GK', 'level')), intFile.getYamlParms(('GK', 'grade')), taId),
                                              (('data', 'ext2'), ('data', 'ext3'), ('data', 'ext1')))
        headers = {
            "Content-Type": 'application/x-www-form-urlencoded; charset=UTF-8',
            "Host": 'bms-3.yzwill.cn',
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/73.0.3683.86 Safari/537.36"
        }
        response = self.session.post(url=case[2], data=case[3], headers=headers, verify=False)
        if response.status_code == 200:
            print("success")
        else:
            print("fails")
        '''提取参数'''
        Result = DataExtraction().extRegxParam(response.text, 'getOpenPfsnByTaId')
        pfsn = Result[random.randint(0, len(Result) - 1)]
        pfsnId = pfsn[0]
        pfsnName = pfsn[1]
        pfsnCode = pfsn[2]
        return pfsnId, pfsnName, pfsnCode

    def test_4_showFeeList(self, pfsnId, taId):
        '''获取国开报读收费标准信息'''
        intFile = YamlParser('StudentInfo')
        case = TestCaseAssembly().setAipParam('showFeeList', (
            intFile.getYamlParms(('GK', 'recruitType')), intFile.getYamlParms(('GK', 'scholarships')), pfsnId,
            taId), (('data', 'recruitType'), ('data', 'scholarship'), ('data', 'pfsnId'), ('data', 'taId')))

        headers = {
            "Content-Type": 'application/x-www-form-urlencoded; charset=UTF-8',
            "Host": 'bms-3.yzwill.cn',
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/73.0.3683.86 Safari/537.36"
        }
        response = self.session.post(url=case[2], data=case[3], headers=headers, verify=False)
        if response.status_code == 200:
            print("success")
        else:
            print("fails")
        '''提取参数'''
        feeId = getJsonParm(response.text)['body']['feeInfo']['feeId']
        Result = DataExtraction().extRegxParam(response.text, 'showFeeList')
        feeList = Result[random.randint(0, len(Result) - 1)]
        return feeId, feeList
    @seq_task(2)
    def test_5_gk_normal_register(self):
        '''随机录入国开类型学员学员'''
        city = self.test_0_getGkOpenEnrollCityInfo()
        unvsId = self.test_1_sUnvs()
        ta = self.test_2_getOpenTestAreaByCity(city)
        pfsn = self.test_3_getOpenPfsnByTaId(ta[0])
        pfsnId = pfsn[0]
        pfsnCode = pfsn[1]
        free = self.test_4_showFeeList(pfsn[0], ta[0])
        feeId = free[0]
        feeList = free[1]
        taId = ta[0]
        taName = ta[1]
        pfsnName = pfsn[2]
        intFile = YamlParser('StudentInfo')

        '''从配置文件获取参数'''
        grade = intFile.getYamlParms(('GK', 'grade'))
        recruitType = intFile.getYamlParms(('GK', 'recruitType'))
        scholarship = intFile.getYamlParms(('GK', 'scholarships'))
        '''从参数文件获取参数'''
        mobile = DataSource().getMobile()
        idCard = DataSource().getIdcard()

        pfsnLevel = intFile.getYamlParms(('GK', 'pfsnLevel'))

        '''将参数组合到接口文件'''
        values = (str(grade), str(recruitType), str(scholarship), str(city), str(unvsId), str(feeList), str(pfsnCode),
                  str(pfsnId), str(pfsnName), str(taId), str(taName), mobile, idCard, str(pfsnLevel), str(feeId))
        keys = (('data', 'grade'), ('data', 'recruitType'), ('data', 'scholarship'), ('data', 'city'), ('data', 'unvsId'),
                ('data', 'feeList'), ('data', 'pfsnCode'), ('data', 'pfsnId'), ('data', 'pfsnName'), ('data', 'taId'),
                ('data', 'taName'), ('data', 'mobile'), ('data', 'idCard'), ('data', 'pfsnLevel'), ('data', 'feeId'))
        case = TestCaseAssembly().setAipParam('GrecruitAdd', values, keys)
        data = MultipartEncoder(fields=case[3])
        headers = {'Content-Type': ''}
        headers["Content-Type"] = data.content_type
        response = self.session.post(url=case[2], data=data, headers=headers)
        if response.status_code == 200:
            print("success")
        else:
            print("fails")

    def on_stop(self):
        print("=============================")


class WebsiteUser(HttpLocust):
    mobilList = [15099820466,13536761252,15626355036,18813202486,13669506061,15016090925,15889363441,18027728382,13826610004,
                 18970951418,18029069505,18927311592,18103434711,15917283172,15706663680,13825419695,13288777736,13750582160,
                 15119462234,18038311259,15913872170,15816588886,15089581949,18665280569,15976142098,18320068037,15816391726,
                 13829984404,13751850109,15018644556,18998498868,13620080102,15811950352,15797722297,13480574777,15018609942,
                 15818411155,13824210519,18206679445,18023915422,13536307545,15521021243,13530625715,13413077056,13680544470,
                 13422929660,13422934390,18316943126,15070835885,15914471109,13516689732,13424000977,18122518889,15812555342,
                 15016032112,13556099173,13414291620,13437657588,13794581022,13542010516,13829900947,15089562012,13632361419,
                 15811997735,13669886271,18927311515,18927319792,15766347982,13928905545,13826070248,13267828168,13532533099,
                 13556090572,18219378060,13148661828,13302655995,13112415567,13433562727,18102553004,13610298593,13516670756,
                 18102722985,13726903239,15112370451,18138160143,13826660422,15622204840,13928399608,18922558237,15767922580,
                 18922567537,18933280099,18033301771,15918654019,13428058683,13226629215,13318610486,13750226525,15915842165,
                 15277274655,13416620223,15916400624,13437732624,13531687922,18923608195,15917771003,15159268034,15875253254,
                 15976108610,13825059586,15817013917,13725639168,18318450276,15112370451,13143606432,13713186820,13202338120,
                 13435522814,15218488009,18688347692,13536349553,18029763813,13413585484,13713019746,18814133372,13005757115,
                 18600002000,18600010001,15807659835,18819673724,15016068988,13622480196,13602406274,15915594042,13823206269,
                 13075235748,13751905426,18122920839,13726597591,18802652385,13048722492,17817795556,13751866145,13610263122,
                 15816383985,13802880795,18998000704,15521195479,13825455402,13302655995,18820855758,15999838619,13680771111,
                 13302655995,18933569727,13302655995,13422438802,13690944242,18807621619,13559779244,13790792646,13826957794,
                 13413635834,13560148201,15767975733,15016963381,13059533469,18211449083,13824289178,18820595507,18666699427,
                 15766902607,18675258823,13652476149,15010702395,13528609751,18320454959,15507509054,13825454199,18316327930,
                 13413188532,13556288370,18719496108,13829987186,13750202390,13726968303,15018690217,15876544176,13692709115,
                 15820162524,13802524547,13268097623,13652761873,17607656104,13713365905,18975603493,13516668227,13751633185,
                 15119181407,18300069547,13620480808,15118984673,13533721412,15916239521,18665202548,13729606019,15521108479,
                 13790655168,13025572766,15360155651,13714480095,15118922155,18824869884,15017856755,18676661341,13100645467,
                 13232707392,13516660216,13058387448,13670736007,18344552926,18675151819,13925234651,18666260995,15920650653,
                 13824434007,15016051101,13435362241,13824246066,15876531732,13822117227,15810893818,13143622100,15016011514,
                 13632254827,18520412066,15811931896,13750552269,13824272760,18825115483,18508423163,13826901916,13543541495,
                 13971205745,13751718690,13434185827,18665766519,15767377155,13414690832,13631948065,13413000925,18316255128,
                 18627502005,15218006033,19926190669,13690908675,13927338553,15767452313,13480546218,18718879602,13265903773,
                 18145768728,15813357225,13686762639,13202518443,13760705762,13549191612,15914394468,13725060246,13536335503,
                 13824609252,18814370927,13538535197,18666742510,13886533651,15692025269,13437534744,15992708158,18318288611,
                 13433573046,18707620451,18319899778,13416517776,15920577535,14714697845,13533054474,13250765068,13414544271,
                 13380066443,15017012077,15018669757,13427576243,13790947529,15915527958,15207534907,13553493474,18320157083,
                 13539459759,13119570225,15113315126,13501514709,13242500288,13680801059,13414665130,15816510992,15521164810,
                 18218962923,13570493899,13794990589,15992823739,18664059954,17875627021,13430387287,13428878135,13622851617,
                 13531733894,15521202167,15819856745,13927305385,13076240926,18576809034,13592799915,13267988006,13729047792,
                 15113543980,15975247570,15920128452,17620948563,13929373041,18312024928,13168196822,15016001767,13824249326,
                 13428055795,18613081062,15920801161,13437850984,13178441203,13560375753,13527843664,15989254702,15876962000,
                 18702082946,13424076762,13113402523,13756137643,13353079821,18312267392,18676800296,18819168490,13929560610,
                 15820257109,13431817922,13824299727,13392200706,15217823754,13202393120,18026295750,18022431220,15818975563,
                 18520237026,13724860069,13030277603,15766955255,13226512468,18029476883,13570755019,13660536375,18565543603,
                 15011981313,13530642040,13302655995,13688887777,15000000002,13502010055,13527741596,18475338865,13560022517,
                 13680800005,15252565265,13430382689,18026295750,17607020229,18887878787,13012581258,18218844546,13249136327,
                 18807067159,13530625718,13168776180,15525580015,15525580015,15525580015,15521037477,13530625715,15089224075,
                 15612312312,15626171895,15626171892,13574404634,16619000000,13535707381,15575776876,18800120012,18645477755,
                 18695685532,18545644457,18642158455,16619001243,16619001246,16619001248,16619001248,16619001249,13711128400,
                 15622223236,15019250401,13404494281,15017527497,18826064734,17520141714,13316371374,15521418960,15914332338,
                 13570496930,15255555899,13828711553,15626537934,18668048323,15914332338,18818678968,15914332338,18218844546,
                 18665574844,15626284259,13058183683,13155223322,16655441122,13446253252,13526665252,13168552424,13526323252,
                 13685625325,13525232322,13400090009,13670090972,18814130935,13538288183,13580534791,18666805266,15815409328,
                 13824959066,15766866925,13536299821,15113298487,15502037836,13148666592,13536297114,13428070435,13360848081,
                 13428456048,15119049805,13825408616,13138378813,18719074844,15217582116,15610309922,18318362948,18819817337,
                 13202639553,15119002575,13829984462,13725056416,13829946638,15070835884,15980486623,13360867743,18003053911,
                 13824227503,17688319431,13431898338,13249706529,13590242131,15715176390,13794510405,13602985736,13414561623,
                 18307686689,13809666488,13825983559,13728775055,14718060798,17724073289,18565007197,13822184176,18665283948,
                 18028958171,13925502037,13316388228,13809725353,15820714554,13059534770,13532178310,13751780589,15113243721,
                 13532184552,13728400492,13537367139,18628578401,13000100001,18200757461,13537246469,13422924976,13433564551,
                 15119072196,13531732001,13825452292,15999777993,13352621313,13510021464,13829984462,15220600630,13928313848,
                 18927311598,13302659358,13516679719,13829946638,13825452808,12345678910,13825420831,13302659300,13302659055,
                 18824867989,13316363619,18927311599,13630091278,13553278196,17724239209,15976116484,13825418802,18688343794,
                 15811902125,13192809766,18689481992,13928332330,13433532344,13680825687,15767368908,15118920995,18814449910,
                 15767958977,13794500533,15622720742,13728051069,18613095131,18825078109,18520176228,13631907254,13420465297,
                 18200813197,13411221798,18129596682,18820044450,15766295545,18825172583,15622564436,17875050321,18219042689,
                 13539022703,18923659367,13422955477,15516902516,18927383931,13719602899,13437662001,13480506480,13794813633,
                 14778580943,15815434130,15360048269,13794517362,13826223505,15603072913,13751591596,18025404287,13532120330,
                 15902033372,18003011537,18617107420,13242706397,15217830658,15521131005,15999841856,18126961091,13592799067,
                 17688316704,18927383351,15018627082,15118916488,15986970012,15994360002,18316329883,13046241676,17322030425,
                 15625757934,15220583759,15820925395,18307521902,13592767403,13652785654,14715917041,15876368905,18927311533,
                 13302657779,18927311595,13428067693,13682232638,13302659700,13809832588,18316420155,18933587383,13929884170,
                 18927319618,11111111111,13528040882,13302657368,13018436505,18927310600,13725056416,18927311590,18475140582,
                 15119408283,15360118120,13302656158,18319595013,15089322712,13660923415,13302659308,15986475116,13926388973,
                 18718311372,13825941181,15819029577,13352624414,18927319161,13480535660,13302656116,13824227503,13922129652,
                 18927319795,18312851438,13924494449,18575067419,13928390436,13680974671,15363866727,17303090432,15986251046,
                 13531667727,13068250472,15986957020,18948235858,13751590175,13516661465,15089288114,13824293096,13556228637,
                 18316317114,18719191077,13480551071,15816490156,13824211734,18026566465,15812599347,13516659650,18933262499,
                 13829989538,15018663622,13790799978,13352635092,15913899051,13825434437,13437782682,15820741173,13502297710,
                 13631904818,15118971501,13556291434,18319852437,15899549061,13725098678,13516688027,13532155976,15820714081,
                 15816318152,13528079510,15976158840,13680859820,15119050551,13825427067,13528079170,13669594113,13928330808,
                 13751552935,13553427565,13652784961,15815368374,15811929918,18824867590,18003062556,13680884486,13428063536,
                 15913859910,13669593637,13532121338,15089331103,15089200076,13928324326,15217836288,13429980749,13669566208,
                 15119001500,13422943231,15920532923,15820723920,15018604435,18823603539,13437629003,13622792521,13794584020,
                 13138382869,15812504505,13380675811,13556204108,13556258633,15360160188,13433584926,18933505685,13824296565,
                 15018695460,18819980001,13536288325,13680827385,13502271326,13719646016,15819886099,18688325172,15820709108,
                 13824208687,15976237917,13923631087,13422918603,13928321938,13360863119,13413106783,13528089948,15018668859,
                 15013987208,13824295519,13669546377,13138343882,18933505781,13928332415,13902624825,13825465508,13825461225,
                 18927347343,13542784488,15089294261,15217802448,15018609797,13480530314,13923623196,15916362572,13680825198,13692783806,13829983635,13413069933,13433465741,13824235263,13719607261,13509079822,15119019658,15976163398,13500173816,13422937518,13928399330,18923605361,18819640679,13532103220,15119040925,13421008823,14718022268,13536735836,15914928968,13823825740,13823814665,15807533857,13750586560,13823836077,13823850532,13411203151,15907621781,13794738577,18718331094,13435395520,18676226889,13650652401,18023100081,18902779567,18902779023,13642499501,13794729000,13435394893,13226761001,13809746223,13553209687,13435544225,18023100091,13553273048,13794737728,13690993898,13622499856,15917061603,15007625606,13435321635,13539111194,13725279471,18933751863,18607625890,13725655318,13532121099,13553288542,13539199600,13430161321,13560800352,13215147444,13662764069,15913777905,13790420043,13480060036,13712900531,13798898068,13516681455,13692706697,13509088901,15816889962,13437709371,15820717152,15916417986,18718819997,13560963320,13723633998,13823863056,13824598582,15914914181,13411290698,13719954207,13413167747,18129635363,13414789270,13928321938,13413769740,18924037616,13038893789,13026844888,13750219200,18923689933,18316918050,13925752356,13226767918,13794834830,13923013586,13923007056,18026586558,15016216906]
    task_set = LoadLocust
    host = "http://bms-3.yzwill.cn"
    queueData = queue.Queue()
    for i in mobilList:
        queueData.put(i)
    min_wait = 3000
    max_wait = 6000
